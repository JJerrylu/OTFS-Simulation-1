%% ---- Time‑domain pulse shape via convolution ----
%  we want: w_tx(t) = w_tau(t) *conv* w_nu_inv(t)
%    w_tau(t)     = sqrt(B/T) · sinc(B·t)
%    w_nu_inv(t)  = rect( t/T )          (inverse FT of sinc(nu·T))
B         = 0.96e6;            % Pulse bandwidth [Hz]
T         = 1.6e-3;            % Pulse duration [s]
nup       = 15e3;              % OTFS parameter nu_p [Hz]
taup      = 1/nup;             % Delay parameter tau_p [s]
M         = round(B * taup);   % Number of delay bins
N         = round(T * nup);    % Number of Doppler bins
BT = M * N;          % number of time‑domain samples
over_sampling_rate = 10;
t = (0:BT-1)*over_sampling_rate/B;   % centered time axis

% → delay‑domain kernel (sinc in t)
w_tau = sqrt(B) * sinc(B * t);
figure; plot(t, real(w_tau)); hold on; plot(t, imag(w_nu_inv));
title('Time‑domain transmit pulse shape w\_tx(t)');
xlabel('t [s]'); legend('Re','Im');


% → Doppler‑domain kernel (rect in t)
%    rectpuls(x) = 1 for |x|<0.5, 0.5 at |x|=0.5, 0 elsewhere
w_nu_inv = rectpuls(t / T)/sqrt(T);

% convolution (保持 same length)，注意離散化要除以 Fs
wtx_time = conv(w_tau, w_nu_inv, 'same') / Fs;

% matched filter in time
wrx_time = conj(flipud(wtx_time));

% visualize if you like:
figure; plot(t, real(wtx_time)); hold on; plot(t, imag(wtx_time));
title('Time‑domain transmit pulse shape w\_tx(t)');
xlabel('t [s]'); legend('Re','Im');
